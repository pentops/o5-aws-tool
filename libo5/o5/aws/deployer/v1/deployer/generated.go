package deployer

// Code generated by jsonapi. DO NOT EDIT.
// Source: github.com/pentops/o5-aws-tool/libo5/o5/aws/deployer/v1/deployer

import (
	context "context"
	fmt "fmt"
	application "github.com/pentops/o5-aws-tool/libo5/o5/application/v1/application"
	environment "github.com/pentops/o5-aws-tool/libo5/o5/environment/v1/environment"
	list "github.com/pentops/o5-aws-tool/libo5/psm/list/v1/list"
	state "github.com/pentops/o5-aws-tool/libo5/psm/state/v1/state"
)

type Requester interface {
	Request(ctx context.Context, method string, path string, body interface{}, response interface{}) error
}

// DeploymentCommandService
type DeploymentCommandService struct {
	Requester
}

func NewDeploymentCommandService(requester Requester) *DeploymentCommandService {
	return &DeploymentCommandService{
		Requester: requester,
	}
}

func (s DeploymentCommandService) TriggerDeployment(ctx context.Context, req *TriggerDeploymentRequest) (*TriggerDeploymentResponse, error) {
	path := fmt.Sprintf("/deployer/v1/c/deployments/%s",
		req.DeploymentId,
	)
	resp := &TriggerDeploymentResponse{}
	err := s.Request(ctx, "POST", path, req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s DeploymentCommandService) TerminateDeployment(ctx context.Context, req *TerminateDeploymentRequest) (*TerminateDeploymentResponse, error) {
	path := fmt.Sprintf("/deployer/v1/c/deployments/%s",
		req.DeploymentId,
	)
	resp := &TerminateDeploymentResponse{}
	err := s.Request(ctx, "DELETE", path, req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s DeploymentCommandService) UpsertCluster(ctx context.Context, req *UpsertClusterRequest) (*UpsertClusterResponse, error) {
	path := fmt.Sprintf("/deployer/v1/c/clusters/config")
	resp := &UpsertClusterResponse{}
	err := s.Request(ctx, "POST", path, req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s DeploymentCommandService) UpsertEnvironment(ctx context.Context, req *UpsertEnvironmentRequest) (*UpsertEnvironmentResponse, error) {
	path := fmt.Sprintf("/deployer/v1/c/environments/%s/config",
		req.EnvironmentId,
	)
	resp := &UpsertEnvironmentResponse{}
	err := s.Request(ctx, "POST", path, req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s DeploymentCommandService) UpsertStack(ctx context.Context, req *UpsertStackRequest) (*UpsertStackResponse, error) {
	path := fmt.Sprintf("/deployer/v1/c/stacks/%s/config",
		req.StackId,
	)
	resp := &UpsertStackResponse{}
	err := s.Request(ctx, "POST", path, req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// DeploymentQueryService
type DeploymentQueryService struct {
	Requester
}

func NewDeploymentQueryService(requester Requester) *DeploymentQueryService {
	return &DeploymentQueryService{
		Requester: requester,
	}
}

func (s DeploymentQueryService) GetDeployment(ctx context.Context, req *GetDeploymentRequest) (*GetDeploymentResponse, error) {
	path := fmt.Sprintf("/deployer/v1/q/deployment/%s",
		req.DeploymentId,
	)
	resp := &GetDeploymentResponse{}
	err := s.Request(ctx, "GET", path, req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s DeploymentQueryService) ListDeploymentEvents(ctx context.Context, req *ListDeploymentEventsRequest) (*ListDeploymentEventsResponse, error) {
	path := fmt.Sprintf("/deployer/v1/q/deployment/%s/events",
		req.DeploymentId,
	)
	resp := &ListDeploymentEventsResponse{}
	err := s.Request(ctx, "POST", path, req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s DeploymentQueryService) ListDeployments(ctx context.Context, req *ListDeploymentsRequest) (*ListDeploymentsResponse, error) {
	path := fmt.Sprintf("/deployer/v1/q/deployments")
	resp := &ListDeploymentsResponse{}
	err := s.Request(ctx, "POST", path, req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s DeploymentQueryService) GetStack(ctx context.Context, req *GetStackRequest) (*GetStackResponse, error) {
	path := fmt.Sprintf("/deployer/v1/q/stack/%s",
		req.StackId,
	)
	resp := &GetStackResponse{}
	err := s.Request(ctx, "GET", path, req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s DeploymentQueryService) ListStacks(ctx context.Context, req *ListStacksRequest) (*ListStacksResponse, error) {
	path := fmt.Sprintf("/deployer/v1/q/stacks")
	resp := &ListStacksResponse{}
	err := s.Request(ctx, "POST", path, req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s DeploymentQueryService) ListStackEvents(ctx context.Context, req *ListStackEventsRequest) (*ListStackEventsResponse, error) {
	path := fmt.Sprintf("/deployer/v1/q/stack/%s/events",
		req.StackId,
	)
	resp := &ListStackEventsResponse{}
	err := s.Request(ctx, "POST", path, req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s DeploymentQueryService) ListEnvironments(ctx context.Context, req *ListEnvironmentsRequest) (*ListEnvironmentsResponse, error) {
	path := fmt.Sprintf("/deployer/v1/q/environments")
	resp := &ListEnvironmentsResponse{}
	err := s.Request(ctx, "POST", path, req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s DeploymentQueryService) GetEnvironment(ctx context.Context, req *GetEnvironmentRequest) (*GetEnvironmentResponse, error) {
	path := fmt.Sprintf("/deployer/v1/q/environment/%s",
		req.EnvironmentId,
	)
	resp := &GetEnvironmentResponse{}
	err := s.Request(ctx, "GET", path, req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s DeploymentQueryService) ListEnvironmentEvents(ctx context.Context, req *ListEnvironmentEventsRequest) (*ListEnvironmentEventsResponse, error) {
	path := fmt.Sprintf("/deployer/v1/q/environment/%s/events",
		req.EnvironmentId,
	)
	resp := &ListEnvironmentEventsResponse{}
	err := s.Request(ctx, "POST", path, req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// StepRequestType_CFUpdate Proto: o5.aws.deployer.v1.StepRequestType.CFUpdate
type StepRequestType_CFUpdate struct {
	Spec   *CFStackInput  `json:"spec,omitempty"`
	Output *CFStackOutput `json:"output,omitempty"`
}

// StepOutputType Proto: o5.aws.deployer.v1.StepOutputType
type StepOutputType struct {
	CfStatus     *StepOutputType_CFStatus     `json:"cfStatus,omitempty"`
	CfPlanStatus *StepOutputType_CFPlanStatus `json:"cfPlanStatus,omitempty"`
}

func (s StepOutputType) OneofKey() string {
	if s.CfStatus != nil {
		return "cfStatus"
	}
	if s.CfPlanStatus != nil {
		return "cfPlanStatus"
	}
	return ""
}

func (s StepOutputType) Type() interface{} {
	if s.CfStatus != nil {
		return s.CfStatus
	}
	if s.CfPlanStatus != nil {
		return s.CfPlanStatus
	}
	return nil
}

// DeploymentEventType_StackAvailable Proto: o5.aws.deployer.v1.DeploymentEventType.StackAvailable
type DeploymentEventType_StackAvailable struct {
	StackOutput *CFStackOutput `json:"stackOutput,omitempty"`
}

// ListStacksRequest
type ListStacksRequest struct {
	Page  *list.PageRequest  `json:"page,omitempty"`
	Query *list.QueryRequest `json:"query,omitempty"`
}

func (s *ListStacksRequest) SetPageToken(pageToken string) {
	if s.Page == nil {
		s.Page = &list.PageRequest{}
	}
	s.Page.Token = &pageToken
}

// ListStacksResponse
type ListStacksResponse struct {
	Stacks []*StackState      `json:"stacks,omitempty"`
	Page   *list.PageResponse `json:"page,omitempty"`
}

func (s ListStacksResponse) GetPageToken() *string {
	if s.Page == nil {
		return nil
	}
	return s.Page.NextToken
}

func (s ListStacksResponse) GetItems() []*StackState {
	return s.Stacks
}

// TriggerSource_InlineSource Proto: o5.aws.deployer.v1.service.TriggerSource.InlineSource
type TriggerSource_InlineSource struct {
	Version     string                   `json:"version"`
	Application *application.Application `json:"application"`
}

// GetDeploymentRequest
type GetDeploymentRequest struct {
	DeploymentId string `path:"deploymentId" json:"-"`
}

// StepRequestType_CFCreate Proto: o5.aws.deployer.v1.StepRequestType.CFCreate
type StepRequestType_CFCreate struct {
	Spec       *CFStackInput  `json:"spec,omitempty"`
	Output     *CFStackOutput `json:"output,omitempty"`
	EmptyStack bool           `json:"emptyStack"`
}

// DeploymentEvent Proto: o5.aws.deployer.v1.DeploymentEvent
type DeploymentEvent struct {
	Metadata *state.EventMetadata `json:"metadata"`
	Keys     *DeploymentKeys      `json:"keys"`
	Event    *DeploymentEventType `json:"event"`
}

// StackEventType Proto: o5.aws.deployer.v1.StackEventType
type StackEventType struct {
	Configured          *StackEventType_Configured          `json:"configured,omitempty"`
	DeploymentRequested *StackEventType_DeploymentRequested `json:"deploymentRequested,omitempty"`
	DeploymentCompleted *StackEventType_DeploymentCompleted `json:"deploymentCompleted,omitempty"`
	DeploymentFailed    *StackEventType_DeploymentFailed    `json:"deploymentFailed,omitempty"`
	RunDeployment       *StackEventType_RunDeployment       `json:"runDeployment,omitempty"`
}

func (s StackEventType) OneofKey() string {
	if s.Configured != nil {
		return "configured"
	}
	if s.DeploymentRequested != nil {
		return "deploymentRequested"
	}
	if s.DeploymentCompleted != nil {
		return "deploymentCompleted"
	}
	if s.DeploymentFailed != nil {
		return "deploymentFailed"
	}
	if s.RunDeployment != nil {
		return "runDeployment"
	}
	return ""
}

func (s StackEventType) Type() interface{} {
	if s.Configured != nil {
		return s.Configured
	}
	if s.DeploymentRequested != nil {
		return s.DeploymentRequested
	}
	if s.DeploymentCompleted != nil {
		return s.DeploymentCompleted
	}
	if s.DeploymentFailed != nil {
		return s.DeploymentFailed
	}
	if s.RunDeployment != nil {
		return s.RunDeployment
	}
	return nil
}

// EnvironmentStateData Proto: o5.aws.deployer.v1.EnvironmentStateData
type EnvironmentStateData struct {
	Config *environment.Environment `json:"config,omitempty"`
}

// StepRequestType_EvalJoin Proto: o5.aws.deployer.v1.StepRequestType.EvalJoin
type StepRequestType_EvalJoin struct {
}

// ListEnvironmentEventsResponse
type ListEnvironmentEventsResponse struct {
	Events []*EnvironmentEvent `json:"events,omitempty"`
	Page   *list.PageResponse  `json:"page,omitempty"`
}

func (s ListEnvironmentEventsResponse) GetPageToken() *string {
	if s.Page == nil {
		return nil
	}
	return s.Page.NextToken
}

func (s ListEnvironmentEventsResponse) GetItems() []*EnvironmentEvent {
	return s.Events
}

// ClusterState Proto: o5.aws.deployer.v1.ClusterState
type ClusterState struct {
	Metadata  *state.StateMetadata `json:"metadata"`
	ClusterId string               `json:"clusterId,omitempty"`
	Status    string               `json:"status,omitempty"`
	Data      *ClusterStateData    `json:"data,omitempty"`
}

// StackStateData Proto: o5.aws.deployer.v1.StackStateData
type StackStateData struct {
	CurrentDeployment *StackDeployment   `json:"currentDeployment,omitempty"`
	StackName         string             `json:"stackName,omitempty"`
	ApplicationName   string             `json:"applicationName,omitempty"`
	EnvironmentName   string             `json:"environmentName,omitempty"`
	EnvironmentId     string             `json:"environmentId,omitempty"`
	QueuedDeployments []*StackDeployment `json:"queuedDeployments,omitempty"`
}

// GetDeploymentResponse
type GetDeploymentResponse struct {
	State  *DeploymentState   `json:"state,omitempty"`
	Events []*DeploymentEvent `json:"events,omitempty"`
}

// DeploymentEventType_Triggered Proto: o5.aws.deployer.v1.DeploymentEventType.Triggered
type DeploymentEventType_Triggered struct {
}

// DeploymentEventType_Error Proto: o5.aws.deployer.v1.DeploymentEventType.Error
type DeploymentEventType_Error struct {
	Error string `json:"error,omitempty"`
}

// StackEventType_DeploymentRequested Proto: o5.aws.deployer.v1.StackEventType.DeploymentRequested
type StackEventType_DeploymentRequested struct {
	Deployment      *StackDeployment `json:"deployment,omitempty"`
	ApplicationName string           `json:"applicationName,omitempty"`
	EnvironmentName string           `json:"environmentName,omitempty"`
	EnvironmentId   string           `json:"environmentId,omitempty"`
}

// GetEnvironmentResponse
type GetEnvironmentResponse struct {
	State  *EnvironmentState   `json:"state,omitempty"`
	Events []*EnvironmentEvent `json:"events,omitempty"`
}

// TriggerDeploymentResponse
type TriggerDeploymentResponse struct {
	DeploymentId  string `json:"deploymentId,omitempty"`
	EnvironmentId string `json:"environmentId,omitempty"`
	ClusterId     string `json:"clusterId,omitempty"`
}

// UpsertClusterRequest
type UpsertClusterRequest struct {
	ClusterId  string                      `json:"clusterId,omitempty"`
	Config     *environment.CombinedConfig `json:"config,omitempty"`
	ConfigYaml []byte                      `json:"configYaml,omitempty"`
	ConfigJson []byte                      `json:"configJson,omitempty"`
}

// StackDeployment Proto: o5.aws.deployer.v1.StackDeployment
type StackDeployment struct {
	DeploymentId string `json:"deploymentId,omitempty"`
	Version      string `json:"version,omitempty"`
}

// CloudFormationStackParameterType Proto: o5.aws.deployer.v1.CloudFormationStackParameterType
type CloudFormationStackParameterType struct {
	RulePriority *CloudFormationStackParameterType_RulePriority `json:"rulePriority,omitempty"`
	DesiredCount *CloudFormationStackParameterType_DesiredCount `json:"desiredCount,omitempty"`
}

func (s CloudFormationStackParameterType) OneofKey() string {
	if s.RulePriority != nil {
		return "rulePriority"
	}
	if s.DesiredCount != nil {
		return "desiredCount"
	}
	return ""
}

func (s CloudFormationStackParameterType) Type() interface{} {
	if s.RulePriority != nil {
		return s.RulePriority
	}
	if s.DesiredCount != nil {
		return s.DesiredCount
	}
	return nil
}

// StepRequestType_PGUpsert Proto: o5.aws.deployer.v1.StepRequestType.PGUpsert
type StepRequestType_PGUpsert struct {
	Spec              *PostgresSpec `json:"spec,omitempty"`
	InfraOutputStepId string        `json:"infraOutputStepId,omitempty"`
	RotateCredentials bool          `json:"rotateCredentials"`
}

// GetStackRequest
type GetStackRequest struct {
	StackId string `path:"stackId" json:"-"`
}

// TriggerSource Proto: o5.aws.deployer.v1.service.TriggerSource
type TriggerSource struct {
	Github *TriggerSource_GithubSource `json:"github,omitempty"`
	Inline *TriggerSource_InlineSource `json:"inline,omitempty"`
}

func (s TriggerSource) OneofKey() string {
	if s.Github != nil {
		return "github"
	}
	if s.Inline != nil {
		return "inline"
	}
	return ""
}

func (s TriggerSource) Type() interface{} {
	if s.Github != nil {
		return s.Github
	}
	if s.Inline != nil {
		return s.Inline
	}
	return nil
}

// UpsertEnvironmentResponse
type UpsertEnvironmentResponse struct {
	State *EnvironmentState `json:"state"`
}

// UpsertEnvironmentRequest
type UpsertEnvironmentRequest struct {
	EnvironmentId string                   `json:"-" path:"environmentId"`
	ClusterId     string                   `json:"clusterId,omitempty"`
	Config        *environment.Environment `json:"config,omitempty"`
	ConfigYaml    []byte                   `json:"configYaml,omitempty"`
	ConfigJson    []byte                   `json:"configJson,omitempty"`
}

// EnvironmentState Proto: o5.aws.deployer.v1.EnvironmentState
type EnvironmentState struct {
	Metadata      *state.StateMetadata  `json:"metadata"`
	EnvironmentId string                `json:"environmentId,omitempty"`
	ClusterId     string                `json:"clusterId,omitempty"`
	Status        string                `json:"status,omitempty"`
	Data          *EnvironmentStateData `json:"data,omitempty"`
}

// S3Template Proto: o5.aws.deployer.v1.S3Template
type S3Template struct {
	Bucket string `json:"bucket,omitempty"`
	Key    string `json:"key,omitempty"`
	Region string `json:"region,omitempty"`
}

// StepRequestType_CFScale Proto: o5.aws.deployer.v1.StepRequestType.CFScale
type StepRequestType_CFScale struct {
	StackName    string `json:"stackName,omitempty"`
	DesiredCount int64  `json:"desiredCount,omitempty"`
}

// StepRequestType_PGMigrate Proto: o5.aws.deployer.v1.StepRequestType.PGMigrate
type StepRequestType_PGMigrate struct {
	Spec              *PostgresSpec `json:"spec,omitempty"`
	InfraOutputStepId string        `json:"infraOutputStepId,omitempty"`
	EcsClusterName    string        `json:"ecsClusterName,omitempty"`
}

// StackEventType_Configured Proto: o5.aws.deployer.v1.StackEventType.Configured
type StackEventType_Configured struct {
	ApplicationName string `json:"applicationName,omitempty"`
	EnvironmentId   string `json:"environmentId,omitempty"`
	EnvironmentName string `json:"environmentName,omitempty"`
}

// DeploymentFlags Proto: o5.aws.deployer.v1.DeploymentFlags
type DeploymentFlags struct {
	QuickMode         bool `json:"quickMode"`
	RotateCredentials bool `json:"rotateCredentials"`
	CancelUpdates     bool `json:"cancelUpdates"`
	DbOnly            bool `json:"dbOnly"`
	InfraOnly         bool `json:"infraOnly"`
	ImportResources   bool `json:"importResources"`
}

// TerminateDeploymentResponse
type TerminateDeploymentResponse struct {
}

// ListEnvironmentsRequest
type ListEnvironmentsRequest struct {
	Page  *list.PageRequest  `json:"page,omitempty"`
	Query *list.QueryRequest `json:"query,omitempty"`
}

func (s *ListEnvironmentsRequest) SetPageToken(pageToken string) {
	if s.Page == nil {
		s.Page = &list.PageRequest{}
	}
	s.Page.Token = &pageToken
}

// CFStackInput Proto: o5.aws.deployer.v1.CFStackInput
type CFStackInput struct {
	StackName    string                          `json:"stackName,omitempty"`
	S3Template   *S3Template                     `json:"s3Template,omitempty"`
	TemplateBody string                          `json:"templateBody,omitempty"`
	EmptyStack   bool                            `json:"emptyStack"`
	DesiredCount int64                           `json:"desiredCount,omitempty"`
	Parameters   []*CloudFormationStackParameter `json:"parameters,omitempty"`
	SnsTopics    []string                        `json:"snsTopics,omitempty"`
}

// DeploymentEventType_RunSteps Proto: o5.aws.deployer.v1.DeploymentEventType.RunSteps
type DeploymentEventType_RunSteps struct {
	Steps []*DeploymentStep `json:"steps,omitempty"`
}

// CFChangesetOutput Proto: o5.aws.deployer.v1.CFChangesetOutput
type CFChangesetOutput struct {
	Lifecycle string `json:"lifecycle,omitempty"`
}

// DeploymentEventType_Created Proto: o5.aws.deployer.v1.DeploymentEventType.Created
type DeploymentEventType_Created struct {
	Spec *DeploymentSpec `json:"spec,omitempty"`
}

// DeploymentEventType_StepResult Proto: o5.aws.deployer.v1.DeploymentEventType.StepResult
type DeploymentEventType_StepResult struct {
	StepId string          `json:"stepId,omitempty"`
	Status string          `json:"status,omitempty"`
	Output *StepOutputType `json:"output,omitempty"`
	Error  *string         `json:"error,omitempty"`
}

// ListEnvironmentsResponse
type ListEnvironmentsResponse struct {
	Environments []*EnvironmentState `json:"environments,omitempty"`
	Page         *list.PageResponse  `json:"page,omitempty"`
}

func (s ListEnvironmentsResponse) GetPageToken() *string {
	if s.Page == nil {
		return nil
	}
	return s.Page.NextToken
}

func (s ListEnvironmentsResponse) GetItems() []*EnvironmentState {
	return s.Environments
}

// EnvironmentEvent Proto: o5.aws.deployer.v1.EnvironmentEvent
type EnvironmentEvent struct {
	Metadata      *state.EventMetadata  `json:"metadata"`
	EnvironmentId string                `json:"environmentId,omitempty"`
	ClusterId     string                `json:"clusterId,omitempty"`
	Event         *EnvironmentEventType `json:"event"`
}

// ClusterStateData Proto: o5.aws.deployer.v1.ClusterStateData
type ClusterStateData struct {
	Config *environment.Cluster `json:"config,omitempty"`
}

// StepRequestType_CFPlan Proto: o5.aws.deployer.v1.StepRequestType.CFPlan
type StepRequestType_CFPlan struct {
	Spec            *CFStackInput `json:"spec,omitempty"`
	ImportResources bool          `json:"importResources"`
}

// GetEnvironmentRequest
type GetEnvironmentRequest struct {
	EnvironmentId string `json:"-" path:"environmentId"`
}

// EnvironmentEventType Proto: o5.aws.deployer.v1.EnvironmentEventType
type EnvironmentEventType struct {
	Configured *EnvironmentEventType_Configured `json:"configured,omitempty"`
}

func (s EnvironmentEventType) OneofKey() string {
	if s.Configured != nil {
		return "configured"
	}
	return ""
}

func (s EnvironmentEventType) Type() interface{} {
	if s.Configured != nil {
		return s.Configured
	}
	return nil
}

// CloudFormationStackParameter Proto: o5.aws.deployer.v1.CloudFormationStackParameter
type CloudFormationStackParameter struct {
	Name    string                            `json:"name,omitempty"`
	Value   string                            `json:"value,omitempty"`
	Resolve *CloudFormationStackParameterType `json:"resolve,omitempty"`
}

// CloudFormationStackParameterType_DesiredCount Proto: o5.aws.deployer.v1.CloudFormationStackParameterType.DesiredCount
type CloudFormationStackParameterType_DesiredCount struct {
}

// DeploymentState Proto: o5.aws.deployer.v1.DeploymentState
type DeploymentState struct {
	Metadata      *state.StateMetadata `json:"metadata"`
	DeploymentId  string               `json:"deploymentId,omitempty"`
	StackId       string               `json:"stackId,omitempty"`
	EnvironmentId string               `json:"environmentId,omitempty"`
	ClusterId     string               `json:"clusterId,omitempty"`
	Status        string               `json:"status,omitempty"`
	Data          *DeploymentStateData `json:"data,omitempty"`
}

// DeploymentStep Proto: o5.aws.deployer.v1.DeploymentStep
type DeploymentStep struct {
	Id        string           `json:"id,omitempty"`
	Name      string           `json:"name,omitempty"`
	Status    string           `json:"status,omitempty"`
	Request   *StepRequestType `json:"request,omitempty"`
	Output    *StepOutputType  `json:"output,omitempty"`
	Error     *string          `json:"error,omitempty"`
	DependsOn []string         `json:"dependsOn,omitempty"`
}

// StepOutputType_CFStatus Proto: o5.aws.deployer.v1.StepOutputType.CFStatus
type StepOutputType_CFStatus struct {
	Output *CFStackOutput `json:"output,omitempty"`
}

// ListDeploymentsRequest
type ListDeploymentsRequest struct {
	Page  *list.PageRequest  `json:"page,omitempty"`
	Query *list.QueryRequest `json:"query,omitempty"`
}

func (s *ListDeploymentsRequest) SetPageToken(pageToken string) {
	if s.Page == nil {
		s.Page = &list.PageRequest{}
	}
	s.Page.Token = &pageToken
}

// ListEnvironmentEventsRequest
type ListEnvironmentEventsRequest struct {
	EnvironmentId string             `json:"-" path:"environmentId"`
	Page          *list.PageRequest  `json:"page,omitempty"`
	Query         *list.QueryRequest `json:"query,omitempty"`
}

func (s *ListEnvironmentEventsRequest) SetPageToken(pageToken string) {
	if s.Page == nil {
		s.Page = &list.PageRequest{}
	}
	s.Page.Token = &pageToken
}

// UpsertClusterResponse
type UpsertClusterResponse struct {
	State *ClusterState `json:"state"`
}

// StackState Proto: o5.aws.deployer.v1.StackState
type StackState struct {
	Metadata      *state.StateMetadata `json:"metadata"`
	StackId       string               `json:"stackId,omitempty"`
	EnvironmentId string               `json:"environmentId,omitempty"`
	ClusterId     string               `json:"clusterId,omitempty"`
	Status        string               `json:"status,omitempty"`
	Data          *StackStateData      `json:"data,omitempty"`
}

// DeploymentEventType_StackWait Proto: o5.aws.deployer.v1.DeploymentEventType.StackWait
type DeploymentEventType_StackWait struct {
}

// ListDeploymentEventsRequest
type ListDeploymentEventsRequest struct {
	DeploymentId string             `json:"-" path:"deploymentId"`
	Page         *list.PageRequest  `json:"page,omitempty"`
	Query        *list.QueryRequest `json:"query,omitempty"`
}

func (s *ListDeploymentEventsRequest) SetPageToken(pageToken string) {
	if s.Page == nil {
		s.Page = &list.PageRequest{}
	}
	s.Page.Token = &pageToken
}

// UpsertStackRequest
type UpsertStackRequest struct {
	StackId string `json:"-" path:"stackId"`
}

// StepRequestType Proto: o5.aws.deployer.v1.StepRequestType
type StepRequestType struct {
	EvalJoin   *StepRequestType_EvalJoin   `json:"evalJoin,omitempty"`
	CfCreate   *StepRequestType_CFCreate   `json:"cfCreate,omitempty"`
	CfPlan     *StepRequestType_CFPlan     `json:"cfPlan,omitempty"`
	CfUpdate   *StepRequestType_CFUpdate   `json:"cfUpdate,omitempty"`
	CfScale    *StepRequestType_CFScale    `json:"cfScale,omitempty"`
	PgUpsert   *StepRequestType_PGUpsert   `json:"pgUpsert,omitempty"`
	PgEvaluate *StepRequestType_PGEvaluate `json:"pgEvaluate,omitempty"`
	PgCleanup  *StepRequestType_PGCleanup  `json:"pgCleanup,omitempty"`
	PgMigrate  *StepRequestType_PGMigrate  `json:"pgMigrate,omitempty"`
}

func (s StepRequestType) OneofKey() string {
	if s.EvalJoin != nil {
		return "evalJoin"
	}
	if s.CfCreate != nil {
		return "cfCreate"
	}
	if s.CfPlan != nil {
		return "cfPlan"
	}
	if s.CfUpdate != nil {
		return "cfUpdate"
	}
	if s.CfScale != nil {
		return "cfScale"
	}
	if s.PgUpsert != nil {
		return "pgUpsert"
	}
	if s.PgEvaluate != nil {
		return "pgEvaluate"
	}
	if s.PgCleanup != nil {
		return "pgCleanup"
	}
	if s.PgMigrate != nil {
		return "pgMigrate"
	}
	return ""
}

func (s StepRequestType) Type() interface{} {
	if s.EvalJoin != nil {
		return s.EvalJoin
	}
	if s.CfCreate != nil {
		return s.CfCreate
	}
	if s.CfPlan != nil {
		return s.CfPlan
	}
	if s.CfUpdate != nil {
		return s.CfUpdate
	}
	if s.CfScale != nil {
		return s.CfScale
	}
	if s.PgUpsert != nil {
		return s.PgUpsert
	}
	if s.PgEvaluate != nil {
		return s.PgEvaluate
	}
	if s.PgCleanup != nil {
		return s.PgCleanup
	}
	if s.PgMigrate != nil {
		return s.PgMigrate
	}
	return nil
}

// DeploymentEventType_RunStep Proto: o5.aws.deployer.v1.DeploymentEventType.RunStep
type DeploymentEventType_RunStep struct {
	StepId string `json:"stepId,omitempty"`
}

// StackEventType_DeploymentCompleted Proto: o5.aws.deployer.v1.StackEventType.DeploymentCompleted
type StackEventType_DeploymentCompleted struct {
	Deployment *StackDeployment `json:"deployment,omitempty"`
}

// CloudFormationStackParameterType_RulePriority Proto: o5.aws.deployer.v1.CloudFormationStackParameterType.RulePriority
type CloudFormationStackParameterType_RulePriority struct {
	RouteGroup string `json:"routeGroup,omitempty"`
}

// CFStackOutput Proto: o5.aws.deployer.v1.CFStackOutput
type CFStackOutput struct {
	Lifecycle string      `json:"lifecycle,omitempty"`
	Outputs   []*KeyValue `json:"outputs,omitempty"`
}

// DeploymentEventType_StackWaitFailure Proto: o5.aws.deployer.v1.DeploymentEventType.StackWaitFailure
type DeploymentEventType_StackWaitFailure struct {
	Error string `json:"error,omitempty"`
}

// GetStackResponse
type GetStackResponse struct {
	State  *StackState   `json:"state,omitempty"`
	Events []*StackEvent `json:"events,omitempty"`
}

// StackEventType_DeploymentFailed Proto: o5.aws.deployer.v1.StackEventType.DeploymentFailed
type StackEventType_DeploymentFailed struct {
	Deployment *StackDeployment `json:"deployment,omitempty"`
	Error      string           `json:"error,omitempty"`
}

// StackEventType_RunDeployment Proto: o5.aws.deployer.v1.StackEventType.RunDeployment
type StackEventType_RunDeployment struct {
	DeploymentId string `json:"deploymentId,omitempty"`
}

// TriggerDeploymentRequest
type TriggerDeploymentRequest struct {
	DeploymentId string           `json:"-" path:"deploymentId"`
	Environment  string           `json:"environment,omitempty"`
	Source       *TriggerSource   `json:"source,omitempty"`
	Flags        *DeploymentFlags `json:"flags,omitempty"`
}

// DeploymentSpec Proto: o5.aws.deployer.v1.DeploymentSpec
type DeploymentSpec struct {
	AppName         string                          `json:"appName,omitempty"`
	Version         string                          `json:"version,omitempty"`
	EnvironmentName string                          `json:"environmentName,omitempty"`
	EnvironmentId   string                          `json:"environmentId,omitempty"`
	Template        *S3Template                     `json:"template,omitempty"`
	EcsCluster      string                          `json:"ecsCluster,omitempty"`
	CfStackName     string                          `json:"cfStackName,omitempty"`
	Flags           *DeploymentFlags                `json:"flags,omitempty"`
	Databases       []*PostgresSpec                 `json:"databases,omitempty"`
	Parameters      []*CloudFormationStackParameter `json:"parameters,omitempty"`
	SnsTopics       []string                        `json:"snsTopics,omitempty"`
}

// DeploymentKeys Proto: o5.aws.deployer.v1.DeploymentKeys
type DeploymentKeys struct {
	DeploymentId  string `json:"deploymentId,omitempty"`
	StackId       string `json:"stackId,omitempty"`
	EnvironmentId string `json:"environmentId,omitempty"`
	ClusterId     string `json:"clusterId,omitempty"`
}

// EnvironmentEventType_Configured Proto: o5.aws.deployer.v1.EnvironmentEventType.Configured
type EnvironmentEventType_Configured struct {
	Config *environment.Environment `json:"config,omitempty"`
}

// TerminateDeploymentRequest
type TerminateDeploymentRequest struct {
	DeploymentId string `path:"deploymentId" json:"-"`
}

// StepOutputType_CFPlanStatus Proto: o5.aws.deployer.v1.StepOutputType.CFPlanStatus
type StepOutputType_CFPlanStatus struct {
	Output *CFChangesetOutput `json:"output,omitempty"`
}

// StepRequestType_PGCleanup Proto: o5.aws.deployer.v1.StepRequestType.PGCleanup
type StepRequestType_PGCleanup struct {
	Spec *PostgresSpec `json:"spec,omitempty"`
}

// DeploymentEventType Proto: o5.aws.deployer.v1.DeploymentEventType
type DeploymentEventType struct {
	Created          *DeploymentEventType_Created          `json:"created,omitempty"`
	Triggered        *DeploymentEventType_Triggered        `json:"triggered,omitempty"`
	StackWait        *DeploymentEventType_StackWait        `json:"stackWait,omitempty"`
	StackWaitFailure *DeploymentEventType_StackWaitFailure `json:"stackWaitFailure,omitempty"`
	StackAvailable   *DeploymentEventType_StackAvailable   `json:"stackAvailable,omitempty"`
	RunSteps         *DeploymentEventType_RunSteps         `json:"runSteps,omitempty"`
	StepResult       *DeploymentEventType_StepResult       `json:"stepResult,omitempty"`
	RunStep          *DeploymentEventType_RunStep          `json:"runStep,omitempty"`
	Error            *DeploymentEventType_Error            `json:"error,omitempty"`
	Done             *DeploymentEventType_Done             `json:"done,omitempty"`
	Terminated       *DeploymentEventType_Terminated       `json:"terminated,omitempty"`
}

func (s DeploymentEventType) OneofKey() string {
	if s.Created != nil {
		return "created"
	}
	if s.Triggered != nil {
		return "triggered"
	}
	if s.StackWait != nil {
		return "stackWait"
	}
	if s.StackWaitFailure != nil {
		return "stackWaitFailure"
	}
	if s.StackAvailable != nil {
		return "stackAvailable"
	}
	if s.RunSteps != nil {
		return "runSteps"
	}
	if s.StepResult != nil {
		return "stepResult"
	}
	if s.RunStep != nil {
		return "runStep"
	}
	if s.Error != nil {
		return "error"
	}
	if s.Done != nil {
		return "done"
	}
	if s.Terminated != nil {
		return "terminated"
	}
	return ""
}

func (s DeploymentEventType) Type() interface{} {
	if s.Created != nil {
		return s.Created
	}
	if s.Triggered != nil {
		return s.Triggered
	}
	if s.StackWait != nil {
		return s.StackWait
	}
	if s.StackWaitFailure != nil {
		return s.StackWaitFailure
	}
	if s.StackAvailable != nil {
		return s.StackAvailable
	}
	if s.RunSteps != nil {
		return s.RunSteps
	}
	if s.StepResult != nil {
		return s.StepResult
	}
	if s.RunStep != nil {
		return s.RunStep
	}
	if s.Error != nil {
		return s.Error
	}
	if s.Done != nil {
		return s.Done
	}
	if s.Terminated != nil {
		return s.Terminated
	}
	return nil
}

// DeploymentEventType_Done Proto: o5.aws.deployer.v1.DeploymentEventType.Done
type DeploymentEventType_Done struct {
}

// ListDeploymentsResponse
type ListDeploymentsResponse struct {
	Deployments []*DeploymentState `json:"deployments,omitempty"`
	Page        *list.PageResponse `json:"page,omitempty"`
}

func (s ListDeploymentsResponse) GetPageToken() *string {
	if s.Page == nil {
		return nil
	}
	return s.Page.NextToken
}

func (s ListDeploymentsResponse) GetItems() []*DeploymentState {
	return s.Deployments
}

// StackEvent Proto: o5.aws.deployer.v1.StackEvent
type StackEvent struct {
	Metadata      *state.EventMetadata `json:"metadata"`
	StackId       string               `json:"stackId,omitempty"`
	EnvironmentId string               `json:"environmentId,omitempty"`
	ClusterId     string               `json:"clusterId,omitempty"`
	Event         *StackEventType      `json:"event"`
}

// TriggerSource_GithubSource Proto: o5.aws.deployer.v1.service.TriggerSource.GithubSource
type TriggerSource_GithubSource struct {
	Owner  string `json:"owner"`
	Repo   string `json:"repo"`
	Branch string `json:"branch,omitempty"`
	Tag    string `json:"tag,omitempty"`
	Commit string `json:"commit,omitempty"`
}

// DeploymentStateData Proto: o5.aws.deployer.v1.DeploymentStateData
type DeploymentStateData struct {
	Spec  *DeploymentSpec   `json:"spec,omitempty"`
	Steps []*DeploymentStep `json:"steps,omitempty"`
}

// KeyValue Proto: o5.aws.deployer.v1.KeyValue
type KeyValue struct {
	Name  string `json:"name,omitempty"`
	Value string `json:"value,omitempty"`
}

// StepRequestType_PGEvaluate Proto: o5.aws.deployer.v1.StepRequestType.PGEvaluate
type StepRequestType_PGEvaluate struct {
	DbName string `json:"dbName,omitempty"`
}

// DeploymentEventType_Terminated Proto: o5.aws.deployer.v1.DeploymentEventType.Terminated
type DeploymentEventType_Terminated struct {
}

// ListDeploymentEventsResponse
type ListDeploymentEventsResponse struct {
	Events []*DeploymentEvent `json:"events,omitempty"`
	Page   *list.PageResponse `json:"page,omitempty"`
}

func (s ListDeploymentEventsResponse) GetPageToken() *string {
	if s.Page == nil {
		return nil
	}
	return s.Page.NextToken
}

func (s ListDeploymentEventsResponse) GetItems() []*DeploymentEvent {
	return s.Events
}

// ListStackEventsRequest
type ListStackEventsRequest struct {
	StackId string             `json:"-" path:"stackId"`
	Page    *list.PageRequest  `json:"page,omitempty"`
	Query   *list.QueryRequest `json:"query,omitempty"`
}

func (s *ListStackEventsRequest) SetPageToken(pageToken string) {
	if s.Page == nil {
		s.Page = &list.PageRequest{}
	}
	s.Page.Token = &pageToken
}

// ListStackEventsResponse
type ListStackEventsResponse struct {
	Events []*StackEvent      `json:"events,omitempty"`
	Page   *list.PageResponse `json:"page,omitempty"`
}

func (s ListStackEventsResponse) GetPageToken() *string {
	if s.Page == nil {
		return nil
	}
	return s.Page.NextToken
}

func (s ListStackEventsResponse) GetItems() []*StackEvent {
	return s.Events
}

// UpsertStackResponse
type UpsertStackResponse struct {
	State *StackState `json:"state"`
}

// PostgresSpec Proto: o5.aws.deployer.v1.PostgresSpec
type PostgresSpec struct {
	DbName                  string   `json:"dbName,omitempty"`
	DbExtensions            []string `json:"dbExtensions,omitempty"`
	RootSecretName          string   `json:"rootSecretName,omitempty"`
	MigrationTaskOutputName *string  `json:"migrationTaskOutputName,omitempty"`
	SecretOutputName        string   `json:"secretOutputName,omitempty"`
}
