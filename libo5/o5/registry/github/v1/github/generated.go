package github

// Code generated by jsonapi. DO NOT EDIT.
// Source: github.com/pentops/o5-aws-tool/libo5/o5/registry/github/v1/github

import (
	context "context"
	json "encoding/json"
	fmt "fmt"
	list "github.com/pentops/o5-aws-tool/libo5/psm/list/v1/list"
	state "github.com/pentops/o5-aws-tool/libo5/psm/state/v1/state"
	url "net/url"
)

type Requester interface {
	Request(ctx context.Context, method string, path string, body interface{}, response interface{}) error
}

// GithubQueryService
type GithubQueryService struct {
	Requester
}

func NewGithubQueryService(requester Requester) *GithubQueryService {
	return &GithubQueryService{
		Requester: requester,
	}
}

func (s GithubQueryService) GetRepo(ctx context.Context, req *GetRepoRequest) (*GetRepoResponse, error) {
	path := fmt.Sprintf("/registry/github/v1/q/repo/%s/%s",
		req.Owner,
		req.Name,
	)
	resp := &GetRepoResponse{}
	err := s.Request(ctx, "GET", path, req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s GithubQueryService) ListRepos(ctx context.Context, req *ListReposRequest) (*ListReposResponse, error) {
	path := fmt.Sprintf("/registry/github/v1/q/repo")
	resp := &ListReposResponse{}
	err := s.Request(ctx, "GET", path, req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s GithubQueryService) ListRepoEvents(ctx context.Context, req *ListRepoEventsRequest) (*ListRepoEventsResponse, error) {
	path := fmt.Sprintf("/registry/github/v1/q/repo/%s/%s/events",
		req.Owner,
		req.Name,
	)
	resp := &ListRepoEventsResponse{}
	err := s.Request(ctx, "GET", path, req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// GithubCommandService
type GithubCommandService struct {
	Requester
}

func NewGithubCommandService(requester Requester) *GithubCommandService {
	return &GithubCommandService{
		Requester: requester,
	}
}

func (s GithubCommandService) ConfigureRepo(ctx context.Context, req *ConfigureRepoRequest) (*ConfigureRepoResponse, error) {
	path := fmt.Sprintf("/registry/github/v1/c/repo/%s/%s/configure",
		req.Owner,
		req.Name,
	)
	resp := &ConfigureRepoResponse{}
	err := s.Request(ctx, "POST", path, req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// ListReposResponse
type ListReposResponse struct {
	Repos []*RepoState       `json:"repos,omitempty"`
	Page  *list.PageResponse `json:"page,omitempty"`
}

func (s ListReposResponse) GetPageToken() *string {
	if s.Page == nil {
		return nil
	}
	return s.Page.NextToken
}

func (s ListReposResponse) GetItems() []*RepoState {
	return s.Repos
}

// ConfigureRepoResponse
type ConfigureRepoResponse struct {
	Repo *RepoState `json:"repo,omitempty"`
}

// GetRepoRequest
type GetRepoRequest struct {
	Owner string `json:"-" path:"owner"`
	Name  string `json:"-" path:"name"`
}

// RepoState Proto: o5.registry.github.v1.RepoState
type RepoState struct {
	Metadata *state.StateMetadata `json:"metadata"`
	Keys     *RepoKeys            `json:"keys"`
	Status   string               `json:"status,omitempty"`
	Data     *RepoStateData       `json:"data,omitempty"`
}

// RepoStateData Proto: o5.registry.github.v1.RepoStateData
type RepoStateData struct {
	ChecksEnabled bool      `json:"checksEnabled"`
	Branches      []*Branch `json:"branches,omitempty"`
}

// Branch Proto: o5.registry.github.v1.Branch
type Branch struct {
	BranchName    string              `json:"branchName"`
	DeployTargets []*DeployTargetType `json:"deployTargets"`
}

// DeployTargetType Proto: o5.registry.github.v1.DeployTargetType
type DeployTargetType struct {
	J5Build *DeployTargetType_J5Build `json:"j5Build,omitempty"`
	O5Build *DeployTargetType_O5Build `json:"o5Build,omitempty"`
}

// DeployTargetType_J5Build Proto: o5.registry.github.v1.DeployTargetType.J5Build
type DeployTargetType_J5Build struct {
}

// RepoKeys Proto: o5.registry.github.v1.RepoKeys
type RepoKeys struct {
	Owner string `json:"owner"`
	Name  string `json:"name"`
}

// DeployTargetType_O5Build Proto: o5.registry.github.v1.DeployTargetType.O5Build
type DeployTargetType_O5Build struct {
	Environment string `json:"environment,omitempty"`
}

// RepoEvent Proto: o5.registry.github.v1.RepoEvent
type RepoEvent struct {
	Metadata *state.EventMetadata `json:"metadata"`
	Keys     *RepoKeys            `json:"keys"`
	Event    *RepoEventType       `json:"event"`
}

// ConfigureRepoRequest
type ConfigureRepoRequest struct {
	Owner  string                   `json:"-" path:"owner"`
	Name   string                   `json:"-" path:"name"`
	Config *RepoEventType_Configure `json:"config,omitempty"`
}

// GetRepoResponse
type GetRepoResponse struct {
	Repo *RepoState `json:"repo,omitempty"`
}

// ListReposRequest
type ListReposRequest struct {
	Page  *list.PageRequest  `json:"-" query:"page"`
	Query *list.QueryRequest `json:"-" query:"query"`
}

func (s ListReposRequest) QueryParameters() (url.Values, error) {
	values := url.Values{}
	if s.Page != nil {
		bb, err := json.Marshal(s.Page)
		if err != nil {
			return nil, err
		}
		values.Set("page", string(bb))
	}
	if s.Query != nil {
		bb, err := json.Marshal(s.Query)
		if err != nil {
			return nil, err
		}
		values.Set("query", string(bb))
	}
	return values, nil
}

func (s *ListReposRequest) SetPageToken(pageToken string) {
	if s.Page == nil {
		s.Page = &list.PageRequest{}
	}
	s.Page.Token = &pageToken
}

// ListRepoEventsRequest
type ListRepoEventsRequest struct {
	Owner string             `json:"-" path:"owner"`
	Name  string             `json:"-" path:"name"`
	Page  *list.PageRequest  `json:"-" query:"page"`
	Query *list.QueryRequest `json:"-" query:"query"`
}

func (s ListRepoEventsRequest) QueryParameters() (url.Values, error) {
	values := url.Values{}
	if s.Page != nil {
		bb, err := json.Marshal(s.Page)
		if err != nil {
			return nil, err
		}
		values.Set("page", string(bb))
	}
	if s.Query != nil {
		bb, err := json.Marshal(s.Query)
		if err != nil {
			return nil, err
		}
		values.Set("query", string(bb))
	}
	return values, nil
}

func (s *ListRepoEventsRequest) SetPageToken(pageToken string) {
	if s.Page == nil {
		s.Page = &list.PageRequest{}
	}
	s.Page.Token = &pageToken
}

// RepoEventType_Configure Proto: o5.registry.github.v1.RepoEventType.Configure
type RepoEventType_Configure struct {
	ChecksEnabled bool      `json:"checksEnabled"`
	Merge         bool      `json:"merge"`
	Branches      []*Branch `json:"branches"`
}

// RepoEventType_ConfigureBranch Proto: o5.registry.github.v1.RepoEventType.ConfigureBranch
type RepoEventType_ConfigureBranch struct {
	Branch *Branch `json:"branch"`
}

// RepoEventType_RemoveBranch Proto: o5.registry.github.v1.RepoEventType.RemoveBranch
type RepoEventType_RemoveBranch struct {
	BranchName string `json:"branchName"`
}

// ListRepoEventsResponse
type ListRepoEventsResponse struct {
	Events []*RepoEvent       `json:"events,omitempty"`
	Page   *list.PageResponse `json:"page,omitempty"`
}

func (s ListRepoEventsResponse) GetPageToken() *string {
	if s.Page == nil {
		return nil
	}
	return s.Page.NextToken
}

func (s ListRepoEventsResponse) GetItems() []*RepoEvent {
	return s.Events
}

// RepoEventType Proto: o5.registry.github.v1.RepoEventType
type RepoEventType struct {
	Configure       *RepoEventType_Configure       `json:"configure,omitempty"`
	ConfigureBranch *RepoEventType_ConfigureBranch `json:"configureBranch,omitempty"`
	RemoveBranch    *RepoEventType_RemoveBranch    `json:"removeBranch,omitempty"`
}
