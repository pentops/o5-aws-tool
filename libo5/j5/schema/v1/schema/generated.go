package schema

// Code generated by jsonapi. DO NOT EDIT.
// Source: github.com/pentops/o5-aws-tool/libo5/j5/schema/v1/schema

import (
	list "github.com/pentops/o5-aws-tool/libo5/j5/list/v1/list"
)

// IntegerField Proto: IntegerField
type IntegerField struct {
	Format    string              `json:"format,omitempty"`
	Rules     *IntegerField_Rules `json:"rules,omitempty"`
	ListRules *list.IntegerRules  `json:"listRules,omitempty"`
}

// Object Proto: Object
type Object struct {
	Name        string            `json:"name,omitempty"`
	Description string            `json:"description,omitempty"`
	Entity      *EntityObject     `json:"entity,omitempty"`
	Properties  []*ObjectProperty `json:"properties,omitempty"`
}

// StringField_Rules Proto: StringField_Rules
type StringField_Rules struct {
	Pattern   *string `json:"pattern,omitempty"`
	MinLength *int64  `json:"minLength,omitempty"`
	MaxLength *int64  `json:"maxLength,omitempty"`
}

// TimestampField Proto: TimestampField
type TimestampField struct {
	Rules     *TimestampField_Rules `json:"rules,omitempty"`
	ListRules *list.TimestampRules  `json:"listRules,omitempty"`
}

// DateField Proto: DateField
type DateField struct {
	Rules *DateField_Rules `json:"rules,omitempty"`
}

// IntegerField_Rules Proto: IntegerField_Rules
type IntegerField_Rules struct {
	ExclusiveMaximum *bool  `json:"exclusiveMaximum"`
	ExclusiveMinimum *bool  `json:"exclusiveMinimum"`
	Minimum          *int64 `json:"minimum,omitempty"`
	Maximum          *int64 `json:"maximum,omitempty"`
	MultipleOf       *int64 `json:"multipleOf,omitempty"`
}

// MapField Proto: MapField
type MapField struct {
	ItemSchema *Field          `json:"itemSchema,omitempty"`
	KeySchema  *Field          `json:"keySchema,omitempty"`
	Rules      *MapField_Rules `json:"rules,omitempty"`
}

// FloatField Proto: FloatField
type FloatField struct {
	Format    string            `json:"format,omitempty"`
	Rules     *FloatField_Rules `json:"rules,omitempty"`
	ListRules *list.FloatRules  `json:"listRules,omitempty"`
}

// OneofField Proto: OneofField
type OneofField struct {
	Ref       *Ref              `json:"ref,omitempty"`
	Oneof     *Oneof            `json:"oneof,omitempty"`
	Rules     *OneofField_Rules `json:"rules,omitempty"`
	ListRules *list.OneofRules  `json:"listRules,omitempty"`
}

// ArrayField Proto: ArrayField
type ArrayField struct {
	Rules *ArrayField_Rules `json:"rules,omitempty"`
	Items *Field            `json:"items,omitempty"`
}

// DateField_Rules Proto: DateField_Rules
type DateField_Rules struct {
}

// Enum_Value Proto: Enum_Value
type Enum_Value struct {
	Name        string `json:"name,omitempty"`
	Number      int32  `json:"number,omitempty"`
	Description string `json:"description,omitempty"`
}

// EntityObject Proto: EntityObject
type EntityObject struct {
	Entity string `json:"entity,omitempty"`
	Part   string `json:"part,omitempty"`
}

// BooleanField Proto: BooleanField
type BooleanField struct {
	Rules     *BooleanField_Rules `json:"rules,omitempty"`
	ListRules *list.BooleanRules  `json:"listRules,omitempty"`
}

// MapField_Rules Proto: MapField_Rules
type MapField_Rules struct {
}

// BytesField_Rules Proto: BytesField_Rules
type BytesField_Rules struct {
}

// Oneof Proto: Oneof
type Oneof struct {
	Name        string            `json:"name,omitempty"`
	Description string            `json:"description,omitempty"`
	Properties  []*ObjectProperty `json:"properties,omitempty"`
}

// Field Proto Message: Field
type Field struct {
	J5TypeKey string          `json:"!type,omitempty"`
	Any       *AnyField       `json:"any,omitempty"`
	Oneof     *OneofField     `json:"oneof,omitempty"`
	Object    *ObjectField    `json:"object,omitempty"`
	Enum      *EnumField      `json:"enum,omitempty"`
	Array     *ArrayField     `json:"array,omitempty"`
	Map       *MapField       `json:"map,omitempty"`
	String    *StringField    `json:"string,omitempty"`
	Integer   *IntegerField   `json:"integer,omitempty"`
	Float     *FloatField     `json:"float,omitempty"`
	Boolean   *BooleanField   `json:"boolean,omitempty"`
	Bytes     *BytesField     `json:"bytes,omitempty"`
	Decimal   *DecimalField   `json:"decimal,omitempty"`
	Date      *DateField      `json:"date,omitempty"`
	Timestamp *TimestampField `json:"timestamp,omitempty"`
	Key       *KeyField       `json:"key,omitempty"`
}

func (s Field) OneofKey() string {
	if s.Any != nil {
		return "any"
	}
	if s.Oneof != nil {
		return "oneof"
	}
	if s.Object != nil {
		return "object"
	}
	if s.Enum != nil {
		return "enum"
	}
	if s.Array != nil {
		return "array"
	}
	if s.Map != nil {
		return "map"
	}
	if s.String != nil {
		return "string"
	}
	if s.Integer != nil {
		return "integer"
	}
	if s.Float != nil {
		return "float"
	}
	if s.Boolean != nil {
		return "boolean"
	}
	if s.Bytes != nil {
		return "bytes"
	}
	if s.Decimal != nil {
		return "decimal"
	}
	if s.Date != nil {
		return "date"
	}
	if s.Timestamp != nil {
		return "timestamp"
	}
	if s.Key != nil {
		return "key"
	}
	return ""
}

func (s Field) Type() interface{} {
	if s.Any != nil {
		return s.Any
	}
	if s.Oneof != nil {
		return s.Oneof
	}
	if s.Object != nil {
		return s.Object
	}
	if s.Enum != nil {
		return s.Enum
	}
	if s.Array != nil {
		return s.Array
	}
	if s.Map != nil {
		return s.Map
	}
	if s.String != nil {
		return s.String
	}
	if s.Integer != nil {
		return s.Integer
	}
	if s.Float != nil {
		return s.Float
	}
	if s.Boolean != nil {
		return s.Boolean
	}
	if s.Bytes != nil {
		return s.Bytes
	}
	if s.Decimal != nil {
		return s.Decimal
	}
	if s.Date != nil {
		return s.Date
	}
	if s.Timestamp != nil {
		return s.Timestamp
	}
	if s.Key != nil {
		return s.Key
	}
	return nil
}

// ObjectField_Rules Proto: ObjectField_Rules
type ObjectField_Rules struct {
	MinProperties *int64 `json:"minProperties,omitempty"`
	MaxProperties *int64 `json:"maxProperties,omitempty"`
}

// RootSchema Proto Message: RootSchema
type RootSchema struct {
	J5TypeKey string  `json:"!type,omitempty"`
	Oneof     *Oneof  `json:"oneof,omitempty"`
	Object    *Object `json:"object,omitempty"`
	Enum      *Enum   `json:"enum,omitempty"`
}

func (s RootSchema) OneofKey() string {
	if s.Oneof != nil {
		return "oneof"
	}
	if s.Object != nil {
		return "object"
	}
	if s.Enum != nil {
		return "enum"
	}
	return ""
}

func (s RootSchema) Type() interface{} {
	if s.Oneof != nil {
		return s.Oneof
	}
	if s.Object != nil {
		return s.Object
	}
	if s.Enum != nil {
		return s.Enum
	}
	return nil
}

// EnumField Proto: EnumField
type EnumField struct {
	Ref       *Ref             `json:"ref,omitempty"`
	Enum      *Enum            `json:"enum,omitempty"`
	Rules     *EnumField_Rules `json:"rules,omitempty"`
	ListRules *list.EnumRules  `json:"listRules,omitempty"`
}

// DecimalField Proto: DecimalField
type DecimalField struct {
	Rules *DecimalField_Rules `json:"rules,omitempty"`
}

// KeyField_Rules Proto: KeyField_Rules
type KeyField_Rules struct {
}

// BytesField Proto: BytesField
type BytesField struct {
	Rules *BytesField_Rules `json:"rules,omitempty"`
}

// KeyField Proto: KeyField
type KeyField struct {
	Rules     *KeyField_Rules `json:"rules,omitempty"`
	Format    string          `json:"format,omitempty"`
	ListRules *list.KeyRules  `json:"listRules,omitempty"`
	Primary   bool            `json:"primary"`
	Entity    string          `json:"entity,omitempty"`
}

// AnyField Proto: AnyField
type AnyField struct {
}

// EnumField_Rules Proto: EnumField_Rules
type EnumField_Rules struct {
	In    []string `json:"in,omitempty"`
	NotIn []string `json:"notIn,omitempty"`
}

// TimestampField_Rules Proto: TimestampField_Rules
type TimestampField_Rules struct {
}

// OneofField_Rules Proto: OneofField_Rules
type OneofField_Rules struct {
}

// ArrayField_Rules Proto: ArrayField_Rules
type ArrayField_Rules struct {
	MinItems    *int64 `json:"minItems,omitempty"`
	MaxItems    *int64 `json:"maxItems,omitempty"`
	UniqueItems *bool  `json:"uniqueItems"`
}

// DecimalField_Rules Proto: DecimalField_Rules
type DecimalField_Rules struct {
}

// FloatField_Rules Proto: FloatField_Rules
type FloatField_Rules struct {
	ExclusiveMaximum *bool    `json:"exclusiveMaximum"`
	ExclusiveMinimum *bool    `json:"exclusiveMinimum"`
	Minimum          *float64 `json:"minimum,omitempty"`
	Maximum          *float64 `json:"maximum,omitempty"`
	MultipleOf       *float64 `json:"multipleOf,omitempty"`
}

// ObjectField Proto: ObjectField
type ObjectField struct {
	Ref                  *Ref               `json:"ref,omitempty"`
	Object               *Object            `json:"object,omitempty"`
	AdditionalProperties bool               `json:"additionalProperties"`
	Rules                *ObjectField_Rules `json:"rules,omitempty"`
	Flatten              bool               `json:"flatten"`
}

// BooleanField_Rules Proto: BooleanField_Rules
type BooleanField_Rules struct {
	Const *bool `json:"const"`
}

// StringField Proto: StringField
type StringField struct {
	Format    *string             `json:"format,omitempty"`
	Rules     *StringField_Rules  `json:"rules,omitempty"`
	ListRules *list.OpenTextRules `json:"listRules,omitempty"`
}

// ObjectProperty Proto: ObjectProperty
type ObjectProperty struct {
	Schema             *Field  `json:"schema,omitempty"`
	Name               string  `json:"name,omitempty"`
	Required           bool    `json:"required"`
	ExplicitlyOptional bool    `json:"explicitlyOptional"`
	ReadOnly           bool    `json:"readOnly"`
	WriteOnly          bool    `json:"writeOnly"`
	Description        string  `json:"description,omitempty"`
	ProtoField         []int32 `json:"protoField,omitempty"`
}

// Ref Proto: Ref
type Ref struct {
	Package string `json:"package,omitempty"`
	Schema  string `json:"schema,omitempty"`
}

// Enum Proto: Enum
type Enum struct {
	Name        string        `json:"name,omitempty"`
	Description string        `json:"description,omitempty"`
	Prefix      string        `json:"prefix,omitempty"`
	Options     []*Enum_Value `json:"options,omitempty"`
}
