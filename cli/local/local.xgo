package local

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"os"
	"os/exec"
	"strings"
	"syscall"

	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/secretsmanager"
	"github.com/awslabs/goformation/v7/cloudformation"
	"github.com/awslabs/goformation/v7/cloudformation/ecs"
	tpl_secretsmanager "github.com/awslabs/goformation/v7/cloudformation/secretsmanager"
	"github.com/awslabs/goformation/v7/cloudformation/sqs"
	"github.com/pentops/log.go/log"
	"github.com/pentops/o5-deploy-aws/cf/app"
	"github.com/pentops/o5-deploy-aws/deployer"
	"github.com/pentops/o5-deploy-aws/protoread"
	"github.com/pentops/o5-aws-tool/gen/o5/application/v1/application"
	"github.com/pentops/o5-aws-tool/gen/o5/environment/v1/environment"
	"github.com/pentops/o5-runtime-sidecar/entrypoint"
	"github.com/pentops/runner"
)

type flagConfig struct {
	Workdir     string `flag:"workdir" default:"."`
	EnvFilename string `flag:"env-file" env:"ENV_FILE"`
	AppFilename string `flag:"app-file" default:"./ext/o5/o5.yaml"`
	Command     string `flag:"command"`
	SidecarAddr string `flag:"sidecar-addr" default:":8888"`
}

func RunLocal(ctx context.Context, flagConfig flagConfig) error {
	defer func() {
		fmt.Printf("Deferred Func Running\n")
	}()
	awsConfig, err := config.LoadDefaultConfig(ctx)
	if err != nil {
		return fmt.Errorf("failed to load configuration: %w", err)
	}

	s3Client := s3.NewFromConfig(awsConfig)
	secretsManagerClient := secretsmanager.NewFromConfig(awsConfig)

	appConfig := &application_pb.Application{}
	if err := protoread.PullAndParse(ctx, s3Client, flagConfig.AppFilename, appConfig); err != nil {
		return err
	}

	if appConfig.DeploymentConfig == nil {
		appConfig.DeploymentConfig = &application_pb.DeploymentConfig{}
	}

	built, err := app.BuildApplication(appConfig, "VERSION")
	if err != nil {
		return err
	}

	env := &environment_pb.Environment{}
	if err := protoread.PullAndParse(ctx, s3Client, flagConfig.EnvFilename, env); err != nil {
		return err
	}

	awsTarget := env.GetAws()
	if awsTarget == nil {
		return fmt.Errorf("AWS Deployer requires the type of environment provider to be AWS")
	}

	deployerResolver, err := deployer.BuildParameterResolver(ctx, env)
	if err != nil {
		return err
	}

	taskDef, ok := built.Template.Resources["AWSECSTaskDefinitionmain"]
	if !ok {
		return fmt.Errorf("no task definition named 'AWSECSTaskDefinitionmain' found")
	}
	taskDefResource, ok := taskDef.(*app.Resource[*ecs.TaskDefinition])
	if !ok {
		return fmt.Errorf("resource 'AWSECSTaskDefinitionmain' is not a TaskDefinition: %T", taskDef)
	}

	var mainContainer *ecs.TaskDefinition_ContainerDefinition
	var sidecarContainer *ecs.TaskDefinition_ContainerDefinition
	for _, container := range taskDefResource.Resource.ContainerDefinitions {
		container := container
		if container.Name == "main" {
			mainContainer = &container
		} else if container.Name == "o5_runtime" {
			sidecarContainer = &container
		}
	}

	if mainContainer == nil {
		return fmt.Errorf("no container named 'main' found")
	}
	if sidecarContainer == nil {
		return fmt.Errorf("no container named 'o5_runtime' found")
	}

	refs := map[string]string{}

	for _, parameter := range built.BuiltApplication.Parameters {
		resolved, err := deployerResolver.ResolveParameter(parameter)
		if err != nil {
			return err
		}
		refs[parameter.Name] = resolved.GetValue()
	}

	for key, refVal := range Refs(built.Template) {
		refs[key] = refVal
	}

	refs["AWS::Region"] = awsTarget.Region
	refs["AWS::StackName"] = fmt.Sprintf("%s-%s", env.FullName, built.Name)

	runGroup := runner.NewGroup(runner.WithName("local"), runner.WithCancelOnSignals())

	mainEnvVars, err := buildEnvironment(ctx, mainContainer, refs, secretsManagerClient)
	if err != nil {
		return err
	}
	fmt.Printf("Main Env Vars %#v\n", mainEnvVars)

	runGroup.Add("main", func(ctx context.Context) error {
		parts := strings.Split(flagConfig.Command, " ")
		cmd := exec.Command(parts[0], parts[1:]...)
		cmd.Dir = flagConfig.Workdir
		cmd.Stdout = os.Stderr //prettyLogger.WriterInterceptor("STDOUT")
		cmd.Stderr = os.Stderr //prettyLogger.WriterInterceptor("STDERR")
		cmd.Stdin = os.Stdin
		cmd.Env = mainEnvVars
		cmd.SysProcAttr = &syscall.SysProcAttr{
			// Detach from the parent process group, i.e. don't pass through
			// signals
			Setpgid: true,
		}

		go func() {
			<-ctx.Done()
			log.Info(ctx, "DONE : Send SIGINT")
			if cmd.Process == nil {
				log.Info(ctx, "DONE : Process is nil")
				return
			}
			if err := cmd.Process.Signal(os.Interrupt); err != nil {
				log.WithError(ctx, err).Error("failed to send SIGINT")
			}

		}()

		err := cmd.Run()
		if err != nil {
			return fmt.Errorf("command failed: %w", err)
		}
		log.Info(ctx, "command exited with no error")
		return nil
	})

	{

		ctx := log.WithField(ctx, "runtime", "sidecar")

		envVars, err := buildEnvironment(ctx, sidecarContainer, refs, secretsManagerClient)
		if err != nil {
			return err
		}

		envMap := map[string]string{}
		for _, envVar := range envVars {
			parts := strings.SplitN(envVar, "=", 2)
			if len(parts) != 2 {
				return fmt.Errorf("invalid environment variable %s", envVar)
			}
			key := parts[0]
			value := parts[1]
			envMap[key] = value
		}

		replacedEndpoints := cleanStringSplit(envMap["SERVICE_ENDPOINT"], ",")
		for idx, endpoint := range replacedEndpoints {
			endpoint = strings.ReplaceAll(endpoint, "main", "localhost")
			replacedEndpoints[idx] = endpoint
		}

		cfg := entrypoint.Config{
			PublicAddr:        flagConfig.SidecarAddr,
			ServiceEndpoints:  replacedEndpoints,
			JWKS:              cleanStringSplit(envMap["JWKS"], ","),
			SNSPrefix:         envMap["SNS_PREFIX"],
			SQSURL:            envMap["SQS_URL"],
			CORSOrigins:       cleanStringSplit(envMap["CORS_ORIGINS"], ","),
			PostgresOutboxURI: cleanStringSplit(envMap["POSTGRES_OUTBOX"], ","),
			NoDeadLetters:     true,
		}

		awsProvider := entrypoint.NewAWSConfigBuilder(awsConfig)
		sidecar, err := entrypoint.FromConfig(cfg, awsProvider)
		if err != nil {
			return fmt.Errorf("sidecar: %w", err)
		}

		runGroup.Add("sidecar", sidecar.Run)
	}

	return runGroup.Run(ctx)
}

func Refs(tpl *cloudformation.Template) map[string]string {

	out := map[string]string{}
	for _, obj := range tpl.Resources {
		switch obj.AWSCloudFormationType() {
		case "AWS::SecretsManager::Secret":
			secret, ok := obj.(*app.Resource[*tpl_secretsmanager.Secret])
			if !ok {
				panic("Not a secret")
			}
			out[secret.Name()] = *secret.Resource.Name
		case "AWS::SQS::Queue":
			queue, ok := obj.(*app.Resource[*sqs.Queue])
			if !ok {
				panic("Not a queue")
			}
			out[queue.Name()] = *queue.Resource.QueueName
		}
	}
	return out
}

func cleanStringSplit(src string, delim string) []string {
	parts := strings.Split(src, delim)
	out := make([]string, 0, len(parts))
	for _, part := range parts {
		part = strings.TrimSpace(part)
		if part == "" {
			continue
		}
		out = append(out, part)
	}
	return out
}

func buildEnvironment(ctx context.Context, container *ecs.TaskDefinition_ContainerDefinition, refs map[string]string, ssm *secretsmanager.Client) ([]string, error) {
	ctx = log.WithField(ctx, "container", container.Name)

	env := os.Environ()

	for _, envVar := range container.Environment {
		key := *envVar.Name
		value, err := decodeIntrinsic(*envVar.Value, refs)
		if err != nil {
			return nil, err
		}

		log.WithFields(ctx, map[string]interface{}{
			"key":   key,
			"value": value,
		}).Debug("setting environment variable")
		env = append(env, fmt.Sprintf("%s=%v", key, value))
	}

	for _, secret := range container.Secrets {
		ctx := log.WithField(ctx, "secretName", secret.Name)
		key := secret.Name
		value, err := decodeIntrinsic(secret.ValueFrom, refs)
		if err != nil {
			return nil, err
		}
		ctx = log.WithField(ctx, "secretFrom", value)
		log.Debug(ctx, "fetching secret")

		parts := strings.Split(value, ":")
		// secret-name:json-key:version-stage:version-id
		secretName := parts[0]
		secretValueResponse, err := ssm.GetSecretValue(ctx, &secretsmanager.GetSecretValueInput{
			SecretId: &secretName,
		})
		if err != nil {
			return nil, err
		}
		secretString := *secretValueResponse.SecretString
		if len(parts) > 1 {
			jsonKey := parts[1]
			if jsonKey != "" {

				secretMap := map[string]interface{}{}
				if err := json.Unmarshal([]byte(secretString), &secretMap); err != nil {
					return nil, fmt.Errorf("decoding secret %s: %w", value, err)
				}
				secretString = secretMap[jsonKey].(string)
			}
		}

		fmt.Printf("%s=(SECRET)\n", key)
		env = append(env, fmt.Sprintf("%s=%v", key, secretString))
	}
	return env, nil
}

func decodeIntrinsic(value string, refs map[string]string) (string, error) {
	// taken from goformation/intrinsics.go
	var decoded []byte
	decoded, err := base64.StdEncoding.DecodeString(value)
	if err != nil {
		// The string value is not base64 encoded, so it's not an intrinsic so just pass it back
		return value, nil
	}

	var intrinsic map[string]interface{}
	if err := json.Unmarshal([]byte(decoded), &intrinsic); err != nil {
		// The string value is not JSON, so it's not an intrinsic so just pass it back
		return value, nil
	}

	// An intrinsic should be an object, with a single key containing a valid intrinsic name
	if len(intrinsic) != 1 {
		return value, nil
	}

	var key string
	var val interface{}
	for _key, _val := range intrinsic {
		key = _key
		val = _val
	}

	switch key {
	case "Fn::Join":
		args, ok := val.([]interface{})
		if !ok {
			return "", fmt.Errorf("Fn::Join requires an array of arguments")
		}
		if len(args) != 2 {
			return "", fmt.Errorf("Fn::Join requires exactly two arguments")
		}
		sep, ok := args[0].(string)
		if !ok {
			return "", fmt.Errorf("Fn::Join requires a string separator")
		}
		elements, ok := args[1].([]interface{})
		if !ok {
			return "", fmt.Errorf("Fn::Join requires an array of elements")
		}

		parts := make([]string, len(elements))
		for i, element := range elements {
			asString, ok := element.(string)
			if !ok {
				return "", fmt.Errorf("Fn::Join requires an array of strings")
			}
			decoded, err := decodeIntrinsic(asString, refs)
			if err != nil {
				return "", err
			}
			parts[i] = decoded
		}
		return strings.Join(parts, sep), nil

	case "Ref":
		ref, ok := refs[val.(string)]
		if !ok {
			return "", fmt.Errorf("ref %s not found", val.(string))
		}
		return decodeIntrinsic(ref, refs)
	default:
		return "", fmt.Errorf("unknown intrinsic %s", key)
	}
}
