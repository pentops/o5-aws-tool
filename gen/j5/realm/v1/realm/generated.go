package realm

// Code generated by jsonapi. DO NOT EDIT.
// Source: github.com/pentops/o5-aws-tool/gen/j5/realm/v1/realm

import (
	context "context"
	json "encoding/json"
	errors "errors"
	url "net/url"
	strings "strings"

	auth "github.com/pentops/o5-aws-tool/gen/j5/auth/v1/auth"
	list "github.com/pentops/o5-aws-tool/gen/j5/list/v1/list"
	state "github.com/pentops/o5-aws-tool/gen/j5/state/v1/state"
)

type Requester interface {
	Request(ctx context.Context, method string, path string, body interface{}, response interface{}) error
}

// ApiAuthService
type ApiAuthService struct {
	Requester
}

func NewApiAuthService(requester Requester) *ApiAuthService {
	return &ApiAuthService{
		Requester: requester,
	}
}

func (s ApiAuthService) Whoami(ctx context.Context, req *WhoamiRequest) (*WhoamiResponse, error) {
	pathParts := make([]string, 4)
	pathParts[0] = ""
	pathParts[1] = "realm-auth"
	pathParts[2] = "v1"
	pathParts[3] = "whoami"
	path := strings.Join(pathParts, "/")
	if query, err := req.QueryParameters(); err != nil {
		return nil, err
	} else if len(query) > 0 {
		path += "?" + query.Encode()
	}
	resp := &WhoamiResponse{}
	err := s.Request(ctx, "GET", path, nil, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s ApiAuthService) GetToken(ctx context.Context, req *GetTokenRequest) (*GetTokenResponse, error) {
	pathParts := make([]string, 4)
	pathParts[0] = ""
	pathParts[1] = "realm-auth"
	pathParts[2] = "v1"
	pathParts[3] = "token"
	path := strings.Join(pathParts, "/")
	resp := &GetTokenResponse{}
	err := s.Request(ctx, "POST", path, req, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// WhoamiRequest
type WhoamiRequest struct {
}

func (s WhoamiRequest) QueryParameters() (url.Values, error) {
	values := url.Values{}
	return values, nil
}

// WhoamiResponse
type WhoamiResponse struct {
	Actor  *auth.Actor              `json:"actor,omitempty"`
	Realms []*WhoamiResponse_Realms `json:"realms,omitempty"`
}

// GetTokenRequest
type GetTokenRequest struct {
	ClientId     string `json:"clientId"`
	ClientSecret string `json:"clientSecret"`
}

// GetTokenResponse
type GetTokenResponse struct {
	Jwt string `json:"jwt"`
}

// RealmQueryService
type RealmQueryService struct {
	Requester
}

func NewRealmQueryService(requester Requester) *RealmQueryService {
	return &RealmQueryService{
		Requester: requester,
	}
}

func (s RealmQueryService) RealmGet(ctx context.Context, req *RealmGetRequest) (*RealmGetResponse, error) {
	pathParts := make([]string, 7)
	pathParts[0] = ""
	pathParts[1] = "j5"
	pathParts[2] = "realm"
	pathParts[3] = "v1"
	pathParts[4] = "realm"
	pathParts[5] = "q"
	if req.RealmId == "" {
		return nil, errors.New("required field \"RealmId\" not set")
	}
	pathParts[6] = req.RealmId
	path := strings.Join(pathParts, "/")
	if query, err := req.QueryParameters(); err != nil {
		return nil, err
	} else if len(query) > 0 {
		path += "?" + query.Encode()
	}
	resp := &RealmGetResponse{}
	err := s.Request(ctx, "GET", path, nil, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s RealmQueryService) RealmList(ctx context.Context, req *RealmListRequest) (*RealmListResponse, error) {
	pathParts := make([]string, 6)
	pathParts[0] = ""
	pathParts[1] = "j5"
	pathParts[2] = "realm"
	pathParts[3] = "v1"
	pathParts[4] = "realm"
	pathParts[5] = "q"
	path := strings.Join(pathParts, "/")
	if query, err := req.QueryParameters(); err != nil {
		return nil, err
	} else if len(query) > 0 {
		path += "?" + query.Encode()
	}
	resp := &RealmListResponse{}
	err := s.Request(ctx, "GET", path, nil, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s RealmQueryService) RealmEvents(ctx context.Context, req *RealmEventsRequest) (*RealmEventsResponse, error) {
	pathParts := make([]string, 8)
	pathParts[0] = ""
	pathParts[1] = "j5"
	pathParts[2] = "realm"
	pathParts[3] = "v1"
	pathParts[4] = "realm"
	pathParts[5] = "q"
	if req.RealmId == "" {
		return nil, errors.New("required field \"RealmId\" not set")
	}
	pathParts[6] = req.RealmId
	pathParts[7] = "events"
	path := strings.Join(pathParts, "/")
	if query, err := req.QueryParameters(); err != nil {
		return nil, err
	} else if len(query) > 0 {
		path += "?" + query.Encode()
	}
	resp := &RealmEventsResponse{}
	err := s.Request(ctx, "GET", path, nil, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// RealmGetRequest
type RealmGetRequest struct {
	RealmId string `json:"-" path:"realmId"`
}

func (s RealmGetRequest) QueryParameters() (url.Values, error) {
	values := url.Values{}
	return values, nil
}

// RealmGetResponse
type RealmGetResponse struct {
	Realm *RealmState `json:"realm"`
}

// RealmListRequest
type RealmListRequest struct {
	Page  *list.PageRequest  `json:"-" query:"page"`
	Query *list.QueryRequest `json:"-" query:"query"`
}

func (s *RealmListRequest) SetPageToken(pageToken string) {
	if s.Page == nil {
		s.Page = &list.PageRequest{}
	}
	s.Page.Token = &pageToken
}

func (s RealmListRequest) QueryParameters() (url.Values, error) {
	values := url.Values{}
	if s.Page != nil {
		bb, err := json.Marshal(s.Page)
		if err != nil {
			return nil, err
		}
		values.Set("page", string(bb))
	}
	if s.Query != nil {
		bb, err := json.Marshal(s.Query)
		if err != nil {
			return nil, err
		}
		values.Set("query", string(bb))
	}
	return values, nil
}

// RealmListResponse
type RealmListResponse struct {
	Realm []*RealmState      `json:"realm,omitempty"`
	Page  *list.PageResponse `json:"page,omitempty"`
}

func (s RealmListResponse) GetPageToken() *string {
	if s.Page == nil {
		return nil
	}
	return s.Page.NextToken
}

func (s RealmListResponse) GetItems() []*RealmState {
	return s.Realm
}

// RealmEventsRequest
type RealmEventsRequest struct {
	RealmId string             `json:"-" path:"realmId"`
	Page    *list.PageRequest  `json:"-" query:"page"`
	Query   *list.QueryRequest `json:"-" query:"query"`
}

func (s *RealmEventsRequest) SetPageToken(pageToken string) {
	if s.Page == nil {
		s.Page = &list.PageRequest{}
	}
	s.Page.Token = &pageToken
}

func (s RealmEventsRequest) QueryParameters() (url.Values, error) {
	values := url.Values{}
	if s.Page != nil {
		bb, err := json.Marshal(s.Page)
		if err != nil {
			return nil, err
		}
		values.Set("page", string(bb))
	}
	if s.Query != nil {
		bb, err := json.Marshal(s.Query)
		if err != nil {
			return nil, err
		}
		values.Set("query", string(bb))
	}
	return values, nil
}

// RealmEventsResponse
type RealmEventsResponse struct {
	Events []*RealmEvent      `json:"events,omitempty"`
	Page   *list.PageResponse `json:"page,omitempty"`
}

func (s RealmEventsResponse) GetPageToken() *string {
	if s.Page == nil {
		return nil
	}
	return s.Page.NextToken
}

func (s RealmEventsResponse) GetItems() []*RealmEvent {
	return s.Events
}

// TenantQueryService
type TenantQueryService struct {
	Requester
}

func NewTenantQueryService(requester Requester) *TenantQueryService {
	return &TenantQueryService{
		Requester: requester,
	}
}

func (s TenantQueryService) TenantGet(ctx context.Context, req *TenantGetRequest) (*TenantGetResponse, error) {
	pathParts := make([]string, 7)
	pathParts[0] = ""
	pathParts[1] = "j5"
	pathParts[2] = "realm"
	pathParts[3] = "v1"
	pathParts[4] = "tenant"
	pathParts[5] = "q"
	if req.TenantId == "" {
		return nil, errors.New("required field \"TenantId\" not set")
	}
	pathParts[6] = req.TenantId
	path := strings.Join(pathParts, "/")
	if query, err := req.QueryParameters(); err != nil {
		return nil, err
	} else if len(query) > 0 {
		path += "?" + query.Encode()
	}
	resp := &TenantGetResponse{}
	err := s.Request(ctx, "GET", path, nil, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s TenantQueryService) TenantList(ctx context.Context, req *TenantListRequest) (*TenantListResponse, error) {
	pathParts := make([]string, 6)
	pathParts[0] = ""
	pathParts[1] = "j5"
	pathParts[2] = "realm"
	pathParts[3] = "v1"
	pathParts[4] = "tenant"
	pathParts[5] = "q"
	path := strings.Join(pathParts, "/")
	if query, err := req.QueryParameters(); err != nil {
		return nil, err
	} else if len(query) > 0 {
		path += "?" + query.Encode()
	}
	resp := &TenantListResponse{}
	err := s.Request(ctx, "GET", path, nil, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s TenantQueryService) TenantEvents(ctx context.Context, req *TenantEventsRequest) (*TenantEventsResponse, error) {
	pathParts := make([]string, 8)
	pathParts[0] = ""
	pathParts[1] = "j5"
	pathParts[2] = "realm"
	pathParts[3] = "v1"
	pathParts[4] = "tenant"
	pathParts[5] = "q"
	if req.TenantId == "" {
		return nil, errors.New("required field \"TenantId\" not set")
	}
	pathParts[6] = req.TenantId
	pathParts[7] = "events"
	path := strings.Join(pathParts, "/")
	if query, err := req.QueryParameters(); err != nil {
		return nil, err
	} else if len(query) > 0 {
		path += "?" + query.Encode()
	}
	resp := &TenantEventsResponse{}
	err := s.Request(ctx, "GET", path, nil, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// TenantGetRequest
type TenantGetRequest struct {
	TenantId string `json:"-" path:"tenantId"`
}

func (s TenantGetRequest) QueryParameters() (url.Values, error) {
	values := url.Values{}
	return values, nil
}

// TenantGetResponse
type TenantGetResponse struct {
	Tenant *TenantState `json:"tenant"`
}

// TenantListRequest
type TenantListRequest struct {
	Page  *list.PageRequest  `json:"-" query:"page"`
	Query *list.QueryRequest `json:"-" query:"query"`
}

func (s *TenantListRequest) SetPageToken(pageToken string) {
	if s.Page == nil {
		s.Page = &list.PageRequest{}
	}
	s.Page.Token = &pageToken
}

func (s TenantListRequest) QueryParameters() (url.Values, error) {
	values := url.Values{}
	if s.Page != nil {
		bb, err := json.Marshal(s.Page)
		if err != nil {
			return nil, err
		}
		values.Set("page", string(bb))
	}
	if s.Query != nil {
		bb, err := json.Marshal(s.Query)
		if err != nil {
			return nil, err
		}
		values.Set("query", string(bb))
	}
	return values, nil
}

// TenantListResponse
type TenantListResponse struct {
	Tenant []*TenantState     `json:"tenant,omitempty"`
	Page   *list.PageResponse `json:"page,omitempty"`
}

func (s TenantListResponse) GetPageToken() *string {
	if s.Page == nil {
		return nil
	}
	return s.Page.NextToken
}

func (s TenantListResponse) GetItems() []*TenantState {
	return s.Tenant
}

// TenantEventsRequest
type TenantEventsRequest struct {
	TenantId string             `json:"-" path:"tenantId"`
	Page     *list.PageRequest  `json:"-" query:"page"`
	Query    *list.QueryRequest `json:"-" query:"query"`
}

func (s *TenantEventsRequest) SetPageToken(pageToken string) {
	if s.Page == nil {
		s.Page = &list.PageRequest{}
	}
	s.Page.Token = &pageToken
}

func (s TenantEventsRequest) QueryParameters() (url.Values, error) {
	values := url.Values{}
	if s.Page != nil {
		bb, err := json.Marshal(s.Page)
		if err != nil {
			return nil, err
		}
		values.Set("page", string(bb))
	}
	if s.Query != nil {
		bb, err := json.Marshal(s.Query)
		if err != nil {
			return nil, err
		}
		values.Set("query", string(bb))
	}
	return values, nil
}

// TenantEventsResponse
type TenantEventsResponse struct {
	Events []*TenantEvent     `json:"events,omitempty"`
	Page   *list.PageResponse `json:"page,omitempty"`
}

func (s TenantEventsResponse) GetPageToken() *string {
	if s.Page == nil {
		return nil
	}
	return s.Page.NextToken
}

func (s TenantEventsResponse) GetItems() []*TenantEvent {
	return s.Events
}

// RealmData Proto: RealmData
type RealmData struct {
	Spec *RealmSpec `json:"spec"`
}

// RealmEvent Proto: RealmEvent
type RealmEvent struct {
	Metadata *state.EventMetadata `json:"metadata"`
	RealmId  string               `json:"realmId"`
	Event    *RealmEventType      `json:"event"`
}

// RealmEventType Proto Oneof: j5.realm.v1.RealmEventType
type RealmEventType struct {
	J5TypeKey string                  `json:"!type,omitempty"`
	Created   *RealmEventType_Created `json:"created,omitempty"`
	Updated   *RealmEventType_Updated `json:"updated,omitempty"`
}

func (s RealmEventType) OneofKey() string {
	if s.Created != nil {
		return "created"
	}
	if s.Updated != nil {
		return "updated"
	}
	return ""
}

func (s RealmEventType) Type() interface{} {
	if s.Created != nil {
		return s.Created
	}
	if s.Updated != nil {
		return s.Updated
	}
	return nil
}

// RealmEventType_Created Proto: RealmEventType_Created
type RealmEventType_Created struct {
	Spec *RealmSpec `json:"spec,omitempty"`
}

// RealmEventType_Updated Proto: RealmEventType_Updated
type RealmEventType_Updated struct {
	Spec *RealmSpec `json:"spec,omitempty"`
}

// RealmKeys Proto: RealmKeys
type RealmKeys struct {
	RealmId string `json:"realmId"`
}

// RealmSpec Proto: RealmSpec
type RealmSpec struct {
	Name        string            `json:"name"`
	Type        string            `json:"type,omitempty"`
	BaseUrl     string            `json:"baseUrl,omitempty"`
	TenantTypes []*TenantType     `json:"tenantTypes,omitempty"`
	Metadata    map[string]string `json:"metadata,omitempty"`
}

// RealmState Proto: RealmState
type RealmState struct {
	Metadata *state.StateMetadata `json:"metadata"`
	RealmId  string               `json:"realmId"`
	Data     *RealmData           `json:"data"`
	Status   RealmStatus          `json:"status"`
}

// RealmStatus Proto Enum: j5.realm.v1.RealmStatus
type RealmStatus string

const (
	RealmStatus_UNSPECIFIED RealmStatus = "UNSPECIFIED"
	RealmStatus_ACTIVE      RealmStatus = "ACTIVE"
)

// TenantData Proto: TenantData
type TenantData struct {
	Spec *TenantSpec `json:"spec"`
}

// TenantEvent Proto: TenantEvent
type TenantEvent struct {
	Metadata   *state.EventMetadata `json:"metadata"`
	TenantId   string               `json:"tenantId"`
	RealmId    string               `json:"realmId"`
	TenantType string               `json:"tenantType,omitempty"`
	Event      *TenantEventType     `json:"event"`
}

// TenantEventType Proto Oneof: j5.realm.v1.TenantEventType
type TenantEventType struct {
	J5TypeKey string                   `json:"!type,omitempty"`
	Created   *TenantEventType_Created `json:"created,omitempty"`
	Updated   *TenantEventType_Updated `json:"updated,omitempty"`
}

func (s TenantEventType) OneofKey() string {
	if s.Created != nil {
		return "created"
	}
	if s.Updated != nil {
		return "updated"
	}
	return ""
}

func (s TenantEventType) Type() interface{} {
	if s.Created != nil {
		return s.Created
	}
	if s.Updated != nil {
		return s.Updated
	}
	return nil
}

// TenantEventType_Created Proto: TenantEventType_Created
type TenantEventType_Created struct {
	Spec *TenantSpec `json:"spec,omitempty"`
}

// TenantEventType_Updated Proto: TenantEventType_Updated
type TenantEventType_Updated struct {
	Spec *TenantSpec `json:"spec,omitempty"`
}

// TenantKeys Proto: TenantKeys
type TenantKeys struct {
	TenantId   string `json:"tenantId"`
	RealmId    string `json:"realmId"`
	TenantType string `json:"tenantType,omitempty"`
}

// TenantSpec Proto: TenantSpec
type TenantSpec struct {
	Name     string            `json:"name,omitempty"`
	Metadata map[string]string `json:"metadata,omitempty"`
}

// TenantState Proto: TenantState
type TenantState struct {
	Metadata   *state.StateMetadata `json:"metadata"`
	TenantId   string               `json:"tenantId"`
	RealmId    string               `json:"realmId"`
	TenantType string               `json:"tenantType,omitempty"`
	Data       *TenantData          `json:"data"`
	Status     TenantStatus         `json:"status"`
}

// TenantStatus Proto Enum: j5.realm.v1.TenantStatus
type TenantStatus string

const (
	TenantStatus_UNSPECIFIED TenantStatus = "UNSPECIFIED"
	TenantStatus_ACTIVE      TenantStatus = "ACTIVE"
)

// TenantType Proto: TenantType
type TenantType struct {
	Name     string `json:"name,omitempty"`
	Label    string `json:"label,omitempty"`
	Singular bool   `json:"singular,omitempty"`
}

// WhoamiResponse_Realms Proto: WhoamiResponse_Realms
type WhoamiResponse_Realms struct {
	Realm  *RealmState  `json:"realm,omitempty"`
	Tenant *TenantState `json:"tenant,omitempty"`
}

// CombinedClient
type CombinedClient struct {
	*ApiAuthService
	*RealmQueryService
	*TenantQueryService
}

func NewCombinedClient(requester Requester) *CombinedClient {
	return &CombinedClient{
		ApiAuthService:     NewApiAuthService(requester),
		RealmQueryService:  NewRealmQueryService(requester),
		TenantQueryService: NewTenantQueryService(requester),
	}
}
